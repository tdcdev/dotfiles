if has('syntax')
    syntax on
endif

"
" neobundle configuration
"
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    au VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')

Plug 'Lokaltog/vim-easymotion'
Plug 'SirVer/ultisnips'
Plug 'Valloric/YouCompleteMe'
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
Plug 'honza/vim-snippets'
Plug 'majutsushi/tagbar'
Plug 'matchit.zip'
Plug 'mileszs/ack.vim'
Plug 'rhysd/vim-clang-format'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'sjl/gundo.vim'
Plug 'tdcdev/ycm_simple_conf'
Plug 'tpope/vim-fugitive'
Plug 'wincent/Command-T'

call plug#end()

"
" vim-colors-solarized configuration
"
let g:solarized_termcolors = 256
let g:solarized_termtrans = 1
if !empty(glob('~/.vim/plugged/vim-colors-solarized'))
    colorscheme solarized
endif

"
" nerdtree configuration
"
let g:NERDTreeWinSize = 50
let g:NERDTreeMouseMode = 2

"
" nerdcommenter configuration
"
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1

"
" tagbar configuration
"
let g:tagbar_left = 0
let g:tagbar_sort = 0
let g:tagbar_width = 50
let g:tagbar_zoomwidth = 0

"
" vim-airline configuration
"
let g:airline_theme = 'badwolf'
let g:airline_left_sep = "▶"
let g:airline_right_sep = "◀"
let g:airline_symbols = {}
let g:airline_symbols.linenr = "␤"
let g:airline_symbols.branch = "⎇""
let g:airline_symbols.paste = "Þ"
let g:airline_symbols.whitespace = "Ξ"
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = "▶"
let g:airline#extensions#tabline#left_alt_sep = "|"

"
" YouCompleteMe configuration
"
let g:ycm_register_as_syntastic_checker = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_filepath_completion_use_working_dir = 1
let g:ycm_key_list_select_completion = ['<TAB>']
let g:ycm_key_list_previous_completion = ['<S-TAB>']
au FileType c,cpp nnoremap <leader>g :YcmCompleter GoToDeclaration<CR>
au FileType c,cpp nnoremap <leader>d :YcmCompleter GoToDefinition<CR>

"
" clang-format configuration
"
let g:clang_format#style_options = {
            \ 'AccessModifierOffset': -4,
            \ 'AllowShortBlocksOnASingleLine' : 'false',
            \ 'AllowShortFunctionsOnASingleLine': 'None',
            \ 'AllowShortIfStatementsOnASingleLine': 'false',
            \ 'AllowShortLoopsOnASingleLine': 'false',
            \ 'AlwaysBreakTemplateDeclarations': 'true',
            \ 'BinPackArguments' : 'false',
            \ 'BinPackParameters' : 'false',
            \ 'BreakBeforeBraces': 'Allman',
            \ 'BreakConstructorInitializersBeforeComma': 'true',
            \ 'ColumnLimit': 80,
            \ 'DerivePointerAlignment': 'false',
            \ 'IndentCaseLabels': 'false',
            \ 'IndentWidth': 4,
            \ 'NamespaceIndentation': 'Inner',
            \ 'PenaltyBreakBeforeFirstCallParameter': 10,
            \ 'PointerAlignment': 'Left',
            \ 'Standard': 'C++11',
            \ 'TabWidth': 4,
            \ 'UseTab': 'Never'}

"
" ultisnips configuration
"
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsListSnippets = '<C-l>'
let g:UltiSnipsSnippetDirectories = [$HOME . '/workspace/snippets/snippets']

"
" gundo configuration
"
let g:gundo_preview_bottom = 1
let g:gundo_preview_height = 25


"
" general settings
"
set showcmd
set showmatch
set ignorecase
set incsearch
set mouse=a
set backspace=2
set number
set background=dark
set laststatus=2
set t_Co=256
set autoindent
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set textwidth=80
set completeopt=menu

"
" variables
"
let g:mapleader = ' '

"
" function to fill one line
"
function! FillOneLine(nline, tw, str, sep)
    let sub = substitute(a:str, '\\', '\\\\', 'g')
    let sub = substitute(sub, '/', '\\/', 'g')
    exe a:nline . 's/\s*$//'
    exe a:nline . 's/\s*' . sub . '\=$//'
    let reps = (a:tw - col('$')) - len(a:str) - 1
    if reps > 0
        exe a:nline . 's/$/ ' . repeat(a:sep, reps)
    endif
    exe a:nline . 's/$/ ' . sub . '/'
endfunction

"
" function to fill block of lines
"
function! FillLines() range
    let tw = input('nb columns: ')
    let str = input('string: ')
    for n in range(a:firstline, a:lastline)
        let line = getline(n)
        call FillOneLine(n, tw, str, ' ')
    endfor
endfunction

"
" function to see column overflow
"
let s:rowoverflow = 0
function! ToogleRowOverflow()
    if s:rowoverflow == 1
        let s:rowoverflow = 0
        match ErrorMsg ''
    else
        let s:rowoverflow = 1
        match ErrorMsg '\%>80.\+'
    endif
endfunction

"
" c cpp filetype
"
au FileType c,cpp nnoremap <buffer> <leader>f :ClangFormat<cr>

"
" latex filetype
"
au BufNewFile,BufRead *.tex,*.sty,*.cls :set filetype=tex

"
" general key mapping
"
inoremap jk <ESC>
vnoremap jk <ESC>
vnoremap <leader>s :sort<CR>
nnoremap <silent> <Leader>a :Ack!
nnoremap <silent> <Leader>o :CommandT<CR>
nnoremap <silent> <Leader>u :GundoToggle<CR>
nnoremap <C-Left> :bprevious<CR>
nnoremap <C-Right> :bnext<CR>
nnoremap <C-Down> :NERDTreeClose<CR>:TagbarClose<CR>:bd<CR>
nnoremap <F8> :call ToogleRowOverflow()<CR>
nnoremap <F9> :NERDTreeToggle<CR>
nnoremap <F10> :TagbarToggle<CR>
nnoremap <F12> :call FillLines()<CR>
